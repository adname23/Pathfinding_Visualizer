{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","Algorithms/dijkstra.js","Algorithms/aStar.js","PathFindingVisualizer/PathfindingVisualizer.jsx","Algorithms/bfs.js","Algorithms/dfs.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","AStar","sortByDistance","distanceToFinishNode","PathfindingVisualizer","getInitialGrid","rowCount","state","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","currentRow","createNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","Math","abs","isNode","mouseIsPressed","isRunning","isStartNode","isFinishNode","isWallNode","currRow","currCol","setState","isGridClear","document","getElementById","newGrid","getNewGridWithWallToggled","clearGrid","nodeClassName","slice","algo","toggleIsRunning","nextNodesStack","currentNode","nextNode","bfs","pop","dfs","nodesInShortestPathOrder","unshift","getNodesInShortestPathOrder","animate","i","setTimeout","animateShortestPath","class","onClick","visualize","clearWalls","href","size","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2ec0cd8f.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\n\nexport function AStar(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\n  \n    while (unvisitedNodes.length) {\n      sortByDistance(unvisitedNodes);\n      const closestNode = unvisitedNodes.shift();\n      // If we encounter a wall, we skip it.\n      if (!closestNode.isWall) {\n        // If the closest node is at a distance of infinity,\n        // we must be trapped and should stop.\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n      }\n    }\n  }\n  \n  function getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n  }\n  \n  function sortByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n  }\n  \n  function updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1 + neighbor.distanceToFinishNode;\n      neighbor.previousNode = node;\n    }\n  }\n  \n  function getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n  }","/*import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport styled from 'styled-components'\nimport {dijkstra, getNodesInShortestPathOrder} from '../Algorithms/dijkstra';\nimport {AStar} from '../Algorithms/aStar';\nimport {dfs} from '../Algorithms/dfs';\nimport {bfs} from '../Algorithms/bfs';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    if (!this.state.isRunning) {\n        if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          'node node-start'\n        ) {\n          this.setState({\n            mouseIsPressed: true,\n            isStartNode: true,\n            currRow: row,\n            currCol: col,\n          });\n        } else if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          'node node-finish'\n        ) {\n          this.setState({\n            mouseIsPressed: true,\n            isFinishNode: true,\n            currRow: row,\n            currCol: col,\n          });\n        } else {\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n          this.setState({\n            grid: newGrid,\n            mouseIsPressed: true,\n            isWallNode: true,\n            currRow: row,\n            currCol: col,\n          });\n        }\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  toggleIsRunning() {\n    this.setState({isRunning: !this.state.isRunning});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      if (nodesInShortestPathOrder[i] === 'end') {\n        setTimeout(() => {\n          this.toggleIsRunning();\n        }, i * 50);\n      } else {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          const nodeClassName = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (\n            nodeClassName !== 'node node-start' &&\n            nodeClassName !== 'node node-finish'\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n          }\n        }, i * 40);\n      }\n    }\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n  clearGrid() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (\n            nodeClassName !== 'node node-start' &&\n            nodeClassName !== 'node node-finish' &&\n            nodeClassName !== 'node node-wall'\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node';\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode =\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\n          }\n          if (nodeClassName === 'node node-finish') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = 0;\n          }\n          if (nodeClassName === 'node node-start') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode =\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\n            node.isStart = true;\n            node.isWall = false;\n            node.previousNode = null;\n            node.isNode = true;\n          }\n        }\n      }\n    }\n  }\n\n  visualize(algo) {\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.toggleIsRunning();\n      const {grid} = this.state;\n      const startNode =\n        grid[START_NODE_ROW][START_NODE_COL];\n      const finishNode =\n        grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n      let visitedNodesInOrder;\n      switch (algo) {\n        case 'Dijkstra':\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n          break;\n        case 'DFS':\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\n        break;\n        case 'AStar':\n          visitedNodesInOrder = AStar(grid, startNode, finishNode);\n        break;\n        case 'BFS':\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\n        break;\n        default:\n          // should never get here\n          break;\n      }\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      nodesInShortestPathOrder.push('end');\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n  }\n\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const nodeClassName = document.getElementById(\n          `node-${node.row}-${node.col}`,\n        ).className;\n        if (\n          nodeClassName !== 'node node-start' &&\n          nodeClassName !== 'node node-finish'\n        ) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n        }\n      }, 10 * i);\n    }\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <>\n        <Button onClick={() => this.visualize('Dijkstra')}>\n          Visualize Dijkstra's Algorithm\n        </Button>\n        <Button onClick={() => this.visualize('DFS')}>\n          Visualize DFS \n        </Button>\n        <Button onClick={() => this.visualize('BFS')}>\n          Visualize BFS\n        </Button>\n        <Button onClick={() => this.visualize('AStar')}>\n          Visualize A* Algorithm\n        </Button>\n        <Button onClick={() => this.componentDidMount()}>\n          Clear Walls\n        </Button>\n        <Button onClick={() => this.clearGrid()}>\n          Clear Grid\n        </Button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 23; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 56; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst Button = styled.button`\n  background-color: black;\n  color: white;\n  font-size: 20px;\n  align-items: top;\n  padding: 10px 60px;\n  border-radius: 5px;\n  margin: 10px 0px;\n  cursor: pointer;\n  &:hover {\n    background-color: #445b65;\n    color: white;\n }\n`;*/\n\nimport React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra} from '../Algorithms/dijkstra';\nimport {AStar} from '../Algorithms/aStar';\nimport styled from 'styled-components';\nimport {dfs} from '../Algorithms/dfs';\nimport {bfs} from '../Algorithms/bfs';\n\nimport './PathfindingVisualizer.css';\n//import { MenuItems } from \"./MenuItems\"\n\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      START_NODE_ROW: 10,\n      FINISH_NODE_ROW: 10,\n      START_NODE_COL: 15,\n      FINISH_NODE_COL: 40,\n      mouseIsPressed: false,\n      ROW_COUNT: 23,\n      COLUMN_COUNT: 57,\n      //MOBILE_ROW_COUNT: 10,\n      //MOBILE_COLUMN_COUNT: 20,\n      isRunning: false,\n      isStartNode: false,\n      isFinishNode: false,\n      isWallNode: false, // xxxxxxx\n      currRow: 0,\n      currCol: 0,\n     // isDesktopView: true,\n    };\n\n    //this.handleMouseDown = this.handleMouseDown.bind(this);\n    //this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    //this.toggleIsRunning = this.toggleIsRunning.bind(this);\n  }\n\n  componentDidMount() {\n    const grid = this.getInitialGrid();\n    this.setState({grid});\n  }\n\n  toggleIsRunning() {\n    this.setState({isRunning: !this.state.isRunning});\n  }\n\n  /*toggleView() {\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.clearWalls();\n      const isDesktopView = !this.state.isDesktopView;\n      let grid;\n      if (isDesktopView) {\n        grid = this.getInitialGrid(\n          this.state.ROW_COUNT,\n          this.state.COLUMN_COUNT,\n        );\n        this.setState({isDesktopView, grid});\n      } else {\n        if (\n          this.state.START_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\n          this.state.FINISH_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\n          this.state.START_NODE_COL > this.state.MOBILE_COLUMN_COUNT ||\n          this.state.FINISH_NODE_COL > this.state.MOBILE_COLUMN_COUNT\n        ) {\n          alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns');\n        } else {\n          grid = this.getInitialGrid(\n            this.state.MOBILE_ROW_COUNT,\n            this.state.MOBILE_COLUMN_COUNT,\n          );\n          this.setState({isDesktopView, grid});\n        }\n      }\n    }\n  }*/\n\n  /******************** Set up the initial grid ********************/\n  getInitialGrid = (\n    rowCount = this.state.ROW_COUNT,\n    colCount = this.state.COLUMN_COUNT,\n  ) => {\n    const initialGrid = [];\n    for (let row = 0; row < rowCount; row++) {\n      const currentRow = [];\n      for (let col = 0; col < colCount; col++) {\n        currentRow.push(this.createNode(row, col));\n      }\n      initialGrid.push(currentRow);\n    }\n    return initialGrid;\n  };\n\n  createNode = (row, col) => {\n    return {\n      row,\n      col,\n      isStart:\n        row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\n      isFinish:\n        row === this.state.FINISH_NODE_ROW &&\n        col === this.state.FINISH_NODE_COL,\n      distance: Infinity,\n      distanceToFinishNode:\n        Math.abs(this.state.FINISH_NODE_ROW - row) +\n        Math.abs(this.state.FINISH_NODE_COL - col),\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n      isNode: true,\n    };\n  };\n\n  /******************** Control mouse events ********************/\n  handleMouseDown(row, col) {\n    if (!this.state.isRunning) {\n      if (this.isGridClear()) {\n        if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          'node node-start'\n        ) {\n          this.setState({\n            mouseIsPressed: true,\n            isStartNode: true,\n            currRow: row,\n            currCol: col,\n          });\n        } else if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          'node node-finish'\n        ) {\n          this.setState({\n            mouseIsPressed: true,\n            isFinishNode: true,\n            currRow: row,\n            currCol: col,\n          });\n        } else {\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n          this.setState({\n            grid: newGrid,\n            mouseIsPressed: true,\n            isWallNode: true,\n            currRow: row,\n            currCol: col,\n          });\n        }\n      } else {\n        this.clearGrid();\n      }\n    }\n  }\n\n  isGridClear() {\n    for (const row of this.state.grid) {\n      for (const node of row) {\n        const nodeClassName = document.getElementById(\n          `node-${node.row}-${node.col}`,\n        ).className;\n        if (\n          nodeClassName === 'node node-visited' ||\n          nodeClassName === 'node node-shortest-path'\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.isRunning) {\n      if (this.state.mouseIsPressed) {\n        const nodeClassName = document.getElementById(`node-${row}-${col}`)\n          .className;\n        if (this.state.isStartNode) {\n          if (nodeClassName !== 'node node-wall') {\n            const prevStartNode = this.state.grid[this.state.currRow][\n              this.state.currCol\n            ];\n            prevStartNode.isStart = false;\n            document.getElementById(\n              `node-${this.state.currRow}-${this.state.currCol}`,\n            ).className = 'node';\n\n            this.setState({currRow: row, currCol: col});\n            const currStartNode = this.state.grid[row][col];\n            currStartNode.isStart = true;\n            document.getElementById(`node-${row}-${col}`).className =\n              'node node-start';\n          }\n          this.setState({START_NODE_ROW: row, START_NODE_COL: col});\n        } else if (this.state.isFinishNode) {\n          if (nodeClassName !== 'node node-wall') {\n            const prevFinishNode = this.state.grid[this.state.currRow][\n              this.state.currCol\n            ];\n            prevFinishNode.isFinish = false;\n            document.getElementById(\n              `node-${this.state.currRow}-${this.state.currCol}`,\n            ).className = 'node';\n\n            this.setState({currRow: row, currCol: col});\n            const currFinishNode = this.state.grid[row][col];\n            currFinishNode.isFinish = true;\n            document.getElementById(`node-${row}-${col}`).className =\n              'node node-finish';\n          }\n          this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\n        } else if (this.state.isWallNode) {\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n          this.setState({grid: newGrid});\n        }\n      }\n    }\n  }\n\n  handleMouseUp(row, col) {\n    if (!this.state.isRunning) {\n      this.setState({mouseIsPressed: false});\n      if (this.state.isStartNode) {\n        const isStartNode = !this.state.isStartNode;\n        this.setState({isStartNode, START_NODE_ROW: row, START_NODE_COL: col});\n      } else if (this.state.isFinishNode) {\n        const isFinishNode = !this.state.isFinishNode;\n        this.setState({\n          isFinishNode,\n          FINISH_NODE_ROW: row,\n          FINISH_NODE_COL: col,\n        });\n      }\n      this.getInitialGrid();\n    }\n  }\n\n  /*handleMouseLeave() {\n    if (this.state.isStartNode) {\n      const isStartNode = !this.state.isStartNode;\n      this.setState({isStartNode, mouseIsPressed: false});\n    } else if (this.state.isFinishNode) {\n      const isFinishNode = !this.state.isFinishNode;\n      this.setState({isFinishNode, mouseIsPressed: false});\n    } else if (this.state.isWallNode) {\n      const isWallNode = !this.state.isWallNode;\n      this.setState({isWallNode, mouseIsPressed: false});\n      this.getInitialGrid();\n    }\n  }*/\n\n  /******************** Clear Board/Walls ********************/\n\n  clearGrid() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (\n            nodeClassName !== 'node node-start' &&\n            nodeClassName !== 'node node-finish' &&\n            nodeClassName !== 'node node-wall'\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node';\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode =\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\n          }\n          if (nodeClassName === 'node node-finish') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = 0;\n          }\n          if (nodeClassName === 'node node-start') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode =\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\n            node.isStart = true;\n            node.isWall = false;\n            node.previousNode = null;\n            node.isNode = true;\n          }\n        }\n      }\n    }\n  }\n\n  clearWalls() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (nodeClassName === 'node node-wall') {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node';\n            node.isWall = false;\n          }\n        }\n      }\n    }\n  }\n\n  /******************** Create Animations ********************/\n  visualize(algo) {\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.toggleIsRunning();\n      const {grid} = this.state;\n      const startNode =\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n      const finishNode =\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n      let visitedNodesInOrder;\n      switch (algo) {\n        case 'Dijkstra':\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n          break;\n        case 'AStar':\n          visitedNodesInOrder = AStar(grid, startNode, finishNode);\n          break;\n        case 'BFS':\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\n          break;\n        case 'DFS':\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\n          break;\n        default:\n          // should never get here\n          break;\n      }\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      nodesInShortestPathOrder.push('end');\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n  }\n\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const nodeClassName = document.getElementById(\n          `node-${node.row}-${node.col}`,\n        ).className;\n        if (\n          nodeClassName !== 'node node-start' &&\n          nodeClassName !== 'node node-finish'\n        ) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n        }\n      }, 10 * i);\n    }\n  }\n\n  /******************** Create path from start to finish ********************/\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      if (nodesInShortestPathOrder[i] === 'end') {\n        setTimeout(() => {\n          this.toggleIsRunning();\n        }, i * 50);\n      } else {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          const nodeClassName = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (\n            nodeClassName !== 'node node-start' &&\n            nodeClassName !== 'node node-finish'\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node node-shortest-path';\n          }\n        }, i * 40);\n      }\n    }\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n    return (\n      <div>\n       <div class = \"header\"> \n        <div class = \"inner_header\">\n        <div class=\"logo_container\">\n          <h1 className=\"navbar-logo\">PathfindingVisualizer<i className=\"fab fa-react\"></i></h1>\n          <h1>\n              \n            <div class = \"inner_header_buttons\">\n                <a class=\"cta\" ><button onClick={() => this.visualize('Dijkstra')}>\n                  Dijkstra's Algorithm\n                </button> </a>\n                <a class=\"cta\"><button onClick={() => this.visualize('AStar')}>\n                  A* Algorithm\n                </button> </a>\n                <a class=\"cta\" ><button onClick={() => this.visualize('BFS')}>\n                  BFS\n                </button> </a>\n                <a class=\"cta\" ><button onClick={() => this.visualize('DFS')}>\n                  DFS \n                </button> </a>\n                <a class=\"cta\"><button onClick={() => this.clearGrid()}>\n                  Clear Grid\n                </button> </a>\n                <a class=\"cta\" ><button onClick={() => this.clearWalls()}>\n                  Clear Walls\n                </button></a>\n              </div>\n              </h1>  \n              <ul class =\"nav__links\">\n                  <li> <a href=\"https://github.com/aembar/Pathfinding_Visualizer\"> <font size=\"+1\">Github Repo</font></a> </li>   \n              </ul>\n              </div>\n              \n        </div>\n        \n      </div>\n        \n            {grid.map((row, rowIdx) => {\n              return (\n                <tr key={rowIdx}>\n                  {row.map((node, nodeIdx) => {\n                    const {row, col, isFinish, isStart, isWall} = node;\n                    return (\n                      <Node\n                        key={nodeIdx}\n                        col={col}\n                        isFinish={isFinish}\n                        isStart={isStart}\n                        isWall={isWall}\n                        mouseIsPressed={mouseIsPressed}\n                        onMouseDown={(row, col) =>\n                          this.handleMouseDown(row, col)\n                        }\n                        onMouseEnter={(row, col) =>\n                          this.handleMouseEnter(row, col)\n                        }\n                        onMouseUp={() => this.handleMouseUp(row, col)}\n                        row={row}></Node>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n            <div class = \"header-bottom\" ></div>\n      </div>\n    );\n  }\n}\n\n// const Button = styled.button`\n//   background-color: black;\n//   color: white;\n//   font-size: 20px;\n//   align-items: top;\n//   padding: 10px 60px;\n//   border-radius: 5px;\n//   margin: 10px 0px;\n//   cursor: pointer;\n//   &:hover {\n//     background-color: #445b65;\n//     color: white;\n//  }\n// `;\n\n/******************** Create Walls ********************/\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  if (!node.isStart && !node.isFinish && node.isNode) {\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n  }\n  return newGrid;\n};\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called after the pathfinding methods.\nfunction getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\n\nexport function bfs(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    let nextNodesStack = [startNode];\n    while (nextNodesStack.length) {\n      const currentNode = nextNodesStack.shift();\n      if (currentNode === finishNode) return visitedNodesInOrder;\n  \n      if (\n        !currentNode.isWall &&\n        (currentNode.isStart || !currentNode.isVisited)\n      ) {\n        currentNode.isVisited = true;\n        visitedNodesInOrder.push(currentNode);\n        const {col, row} = currentNode;\n        let nextNode;\n        if (row > 0) {\n          nextNode = grid[row - 1][col];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (row < grid.length - 1) {\n          nextNode = grid[row + 1][col];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (col > 0) {\n          nextNode = grid[row][col - 1];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (col < grid[0].length - 1) {\n          nextNode = grid[row][col + 1];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n      }\n    }\n    // return visitedNodesInOrder;\n  }","export function dfs(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    const nextNodesStack = [];\n    nextNodesStack.push(startNode);\n    while (nextNodesStack.length) {\n      const currentNode = nextNodesStack.pop();\n  \n      if (currentNode === finishNode) {\n        return visitedNodesInOrder;\n      }\n  \n      if (!currentNode.isWall &&(currentNode.isStart || !currentNode.isVisited)) {\n        currentNode.isVisited = true;\n        visitedNodesInOrder.push(currentNode);\n  \n        const {col, row} = currentNode;\n        let nextNode;\n        if (row > 0) {\n          nextNode = grid[row - 1][col];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (row < grid.length - 1) {\n          nextNode = grid[row + 1][col];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (col > 0) {\n          nextNode = grid[row][col - 1];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (col < grid[0].length - 1) {\n          nextNode = grid[row][col + 1];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n      }\n    }\n  }","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathFindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer> </PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}